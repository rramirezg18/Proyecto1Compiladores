# Generated from Gramatica.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,150,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        5,24,126,8,24,10,24,12,24,129,9,24,1,25,4,25,132,8,25,11,25,12,25,
        133,1,25,1,25,4,25,138,8,25,11,25,12,25,139,3,25,142,8,25,1,26,4,
        26,145,8,26,11,26,12,26,146,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,1,
        0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        3,0,9,10,13,13,32,32,154,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,0,3,57,
        1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,65,1,0,0,0,13,
        68,1,0,0,0,15,73,1,0,0,0,17,79,1,0,0,0,19,83,1,0,0,0,21,89,1,0,0,
        0,23,91,1,0,0,0,25,93,1,0,0,0,27,95,1,0,0,0,29,97,1,0,0,0,31,99,
        1,0,0,0,33,101,1,0,0,0,35,104,1,0,0,0,37,107,1,0,0,0,39,109,1,0,
        0,0,41,111,1,0,0,0,43,114,1,0,0,0,45,117,1,0,0,0,47,120,1,0,0,0,
        49,123,1,0,0,0,51,131,1,0,0,0,53,144,1,0,0,0,55,56,5,40,0,0,56,2,
        1,0,0,0,57,58,5,41,0,0,58,4,1,0,0,0,59,60,5,123,0,0,60,6,1,0,0,0,
        61,62,5,125,0,0,62,8,1,0,0,0,63,64,5,59,0,0,64,10,1,0,0,0,65,66,
        5,105,0,0,66,67,5,102,0,0,67,12,1,0,0,0,68,69,5,101,0,0,69,70,5,
        108,0,0,70,71,5,115,0,0,71,72,5,101,0,0,72,14,1,0,0,0,73,74,5,119,
        0,0,74,75,5,104,0,0,75,76,5,105,0,0,76,77,5,108,0,0,77,78,5,101,
        0,0,78,16,1,0,0,0,79,80,5,102,0,0,80,81,5,111,0,0,81,82,5,114,0,
        0,82,18,1,0,0,0,83,84,5,112,0,0,84,85,5,114,0,0,85,86,5,105,0,0,
        86,87,5,110,0,0,87,88,5,116,0,0,88,20,1,0,0,0,89,90,5,61,0,0,90,
        22,1,0,0,0,91,92,5,43,0,0,92,24,1,0,0,0,93,94,5,45,0,0,94,26,1,0,
        0,0,95,96,5,42,0,0,96,28,1,0,0,0,97,98,5,47,0,0,98,30,1,0,0,0,99,
        100,5,94,0,0,100,32,1,0,0,0,101,102,5,61,0,0,102,103,5,61,0,0,103,
        34,1,0,0,0,104,105,5,33,0,0,105,106,5,61,0,0,106,36,1,0,0,0,107,
        108,5,60,0,0,108,38,1,0,0,0,109,110,5,62,0,0,110,40,1,0,0,0,111,
        112,5,60,0,0,112,113,5,61,0,0,113,42,1,0,0,0,114,115,5,62,0,0,115,
        116,5,61,0,0,116,44,1,0,0,0,117,118,5,43,0,0,118,119,5,43,0,0,119,
        46,1,0,0,0,120,121,5,45,0,0,121,122,5,45,0,0,122,48,1,0,0,0,123,
        127,7,0,0,0,124,126,7,1,0,0,125,124,1,0,0,0,126,129,1,0,0,0,127,
        125,1,0,0,0,127,128,1,0,0,0,128,50,1,0,0,0,129,127,1,0,0,0,130,132,
        7,2,0,0,131,130,1,0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,
        1,0,0,0,134,141,1,0,0,0,135,137,5,46,0,0,136,138,7,2,0,0,137,136,
        1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,142,
        1,0,0,0,141,135,1,0,0,0,141,142,1,0,0,0,142,52,1,0,0,0,143,145,7,
        3,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,
        0,0,0,147,148,1,0,0,0,148,149,6,26,0,0,149,54,1,0,0,0,6,0,127,133,
        139,141,146,1,6,0,0
    ]

class GramaticaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PARENTESIS_APERTURA = 1
    PARENTESIS_CIERRE = 2
    LLAVE_APERTURA = 3
    LLAVE_CIERRE = 4
    FIN_DE_LINEA = 5
    IF = 6
    ELSE = 7
    WHILE = 8
    FOR = 9
    PRINT = 10
    ASIGNACION = 11
    MAS = 12
    MENOS = 13
    MULTIPLICACION = 14
    DIVISION = 15
    POTENCIA = 16
    IGUAL = 17
    DIFERENTE = 18
    MENOR = 19
    MAYOR = 20
    MENOR_IGUAL_QUE = 21
    MAYOR_IGUAL_QUE = 22
    MASMAS = 23
    MENOSMENOS = 24
    VARIABLE = 25
    NUMERO = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'if'", "'else'", "'while'", 
            "'for'", "'print'", "'='", "'+'", "'-'", "'*'", "'/'", "'^'", 
            "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "PARENTESIS_APERTURA", "PARENTESIS_CIERRE", "LLAVE_APERTURA", 
            "LLAVE_CIERRE", "FIN_DE_LINEA", "IF", "ELSE", "WHILE", "FOR", 
            "PRINT", "ASIGNACION", "MAS", "MENOS", "MULTIPLICACION", "DIVISION", 
            "POTENCIA", "IGUAL", "DIFERENTE", "MENOR", "MAYOR", "MENOR_IGUAL_QUE", 
            "MAYOR_IGUAL_QUE", "MASMAS", "MENOSMENOS", "VARIABLE", "NUMERO", 
            "WS" ]

    ruleNames = [ "PARENTESIS_APERTURA", "PARENTESIS_CIERRE", "LLAVE_APERTURA", 
                  "LLAVE_CIERRE", "FIN_DE_LINEA", "IF", "ELSE", "WHILE", 
                  "FOR", "PRINT", "ASIGNACION", "MAS", "MENOS", "MULTIPLICACION", 
                  "DIVISION", "POTENCIA", "IGUAL", "DIFERENTE", "MENOR", 
                  "MAYOR", "MENOR_IGUAL_QUE", "MAYOR_IGUAL_QUE", "MASMAS", 
                  "MENOSMENOS", "VARIABLE", "NUMERO", "WS" ]

    grammarFileName = "Gramatica.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


